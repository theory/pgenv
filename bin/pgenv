#!/usr/bin/env bash

# https://stackoverflow.com/a/19622569/79202
trap 'exit' ERR
set -E

# Set PGENV_ROOT only if not already set.
if [ -z "$PGENV_ROOT" ]; then
    PGENV_ROOT=$(dirname $(dirname $0))
else
    echo "Using PGENV_ROOT $PGENV_ROOT"
fi

cd $PGENV_ROOT
# Always use an absolute path or configure could complain.
PGENV_ROOT=$(pwd)

PGSQL=$PGENV_ROOT/pgsql
PG_DATA=$PGSQL/data
PGENV_DOWNLOAD_ROOT='https://ftp.postgresql.org/pub/source/'

# Now -w because 9.0 and earlier always time out even when successful.
PG_CTL="$PGSQL/bin/pg_ctl"
INITDB="$PGSQL/bin/initdb"

#############################################
# Configuration variable and default settings

PGENV_LOG=$PG_DATA/server.log
PGENV_INITDB_OPTS='-U postgres --locale en_US.UTF-8 --encoding UNICODE'
PGENV_MAKE_OPTS="-j3"
PGENV_CONFIGURE_OPTS=""
PGENV_START_OPTS=""
PGENV_STOP_OPTS=""
#############################################

# Prints a debug message if PGENV_DEBUG
# variable enabled
pgenv_debug(){
    if [ ! -z "$PGENV_DEBUG" ]; then
        echo "[DEBUG] $1" >&2
    fi
}

pgenv_versions() {
    if [ -e "pgsql" ]; then
        local curr=$(readlink pgsql)
    fi
    local installed=0
    local flags=""
    for dir in $( ls -d pgsql-* 2>/dev/null); do
        if [ "$dir" = "$curr" ]; then
            flags="  *"
        else
            flags="   "
        fi

        local version=$( echo $dir | $PGENV_SED 's/^pgsql-//' )
        printf "%s   %-6s    %s\n" "$flags" "$version" "$dir"
        installed=$(( installed + 1 ))
    done

    if [ $installed -eq 0 ]; then
        echo "No PostgreSQL version is installed!"
    fi
}

pgenv_help() {
        cat <<EOF
Usage: pgenv <command> [<args>]

The pgenv commands are:
    use        Set and start the current PostgreSQL version
    clear      Stop and unset the current PostgreSQL version
    start      Start the current PostgreSQL server
    stop       Stop the current PostgreSQL server
    restart    Restart the current PostgreSQL server
    build      Build a specific version of PostgreSQL
    remove     Remove a specific version of PostgreSQL
    version    Show the current PostgreSQL version
    current    Same as 'version'
    versions   List all PostgreSQL versions available to pgenv
    help       Show this usage statement and command summary
    available  Show which versions can be downloaded
    check      Check all program dependencies
    config     View, edit, delete the program configuration

For full documentation, see: https://github.com/theory/pgenv#readme
EOF
}

# Searches for all dependencies and prints a report. If the argument is null,
# only missing depencencies will be reported. Otherwise, it prints the paths for
# all commands.
pgenv_check_dependencies(){
    local verbose=$1
    # Don't exit on error.
    trap "" ERR

    local present=""
    local missing=""
    local warning=""

    pgenv_detail_command(){
        local command_name=$1
        local command=$2

        local nl=$'\n'
        local tab=$'\t'
        if [ -z "$command" ]; then
                missing+="[KO] $command_name:${tab}NOT found!$nl"
        else
            present+="[OK] $command_name:$tab$command$nl"
        fi
    }


    if [ -z "$PGENV_MAKE" ]; then
        PGENV_MAKE=$(which make)
        if [ -z "$PGENV_MAKE" ]; then
            PGENV_MAKE=$(which gmake)
        fi
    fi
    pgenv_detail_command "make" $PGENV_MAKE


    if [ -z "$PGENV_CURL" ]; then
        PGENV_CURL=$(which curl)
    fi
    pgenv_detail_command "curl" $PGENV_CURL

    if [ -z "$PGENV_PATCH" ]; then
        PGENV_PATCH=$(which patch)
    fi
    pgenv_detail_command "patch" $PGENV_PATCH

    if [ -z "$PGENV_TAR" ]; then
        PGENV_TAR=$(which tar)
    fi
    pgenv_detail_command "tar" $PGENV_TAR

    if [ -z "$PGENV_SED" ]; then
        PGENV_SED=$(which sed)
    fi
    pgenv_detail_command "sed" $PGENV_SED


    # check for sort and tr, but not place into
    # variables (do we need to push to that extent?)
    pgenv_detail_command "sort" $(which sort)
    pgenv_detail_command "tr" $(which tr)

    # Go back to exiting on error.
    trap 'exit' ERR
    if [ ! -z "$verbose" ]; then
        # Report found dependencies only in verbose mode.
        echo -n "$present"
    fi
    if [ ! -z "$warning" ]; then
        # Always show warnings.
        echo -n "$warning"
    fi
    if [ ! -z "$missing" ]; then
        # Always show missing dependencies and exit with an error.
        echo "$missing"
        exit 1
    fi
}

# This function checks if its first argument is a valid PostgreSQL version
# number, like "10.5" or "9.5.4". In case no version number is specified, or the
# version number is invalid (e.g., "10", "0.9") the function aborts the script.
# If no version has been specified, and a non-empty string is passed as second
# argument, the function prints out a list of installed versions.
#
# Invoking with `pgenv_input_version_or_exit "$v" "verbose"` will produce a list
# from which the user can choose, while `pgenv_input_version_or_exit "$v"`` will
# not. Mind the quotes!
pgenv_input_version_or_exit() {
    local version=$1
    local verbose=$2
    local hint=$3

    if [ -z "$version" ]; then
        if [ ! -z "$hint" ]; then
            # count the versions
            local installed_versions=0
            for installed in $( ls -d pgsql-* 2>/dev/null )
            do
                installed_versions=$(( installed_versions + 1 ))
            done
        else
            # make a fake value to use the following the if statement
            installed_versions=-1
        fi

        # if no version is installed, suggest the user to build one
        if [ $installed_versions -eq 0 ]; then
            echo "No PostgreSQL version is installed!"
            echo "Are you looking for command \`$hint\` instead?"
            exit 1
        else
            # at least one version is available,
            # ask more details to the user
            echo "Which version of PostgreSQL do you want?"
            if [ ! -z "$verbose" ]; then
                pgenv_versions
            fi
            exit 1
        fi
    fi

    if [[ $version =~ ^[1-9][0-9]?\.[0-9]+(\.[0-9]+)?$ ]]; then
        return # versions 9.5.4 or 10.1 and alike
    elif [[ $version =~ ^[1-9][1-9]beta[1-9]?$ ]]; then
        return # versions 11beta1 and alike
    else
        echo "Value \"$version\" does not appear to be a PostgreSQL valid version number"
        exit 1
    fi
}

# This function accepts a version number (that should have been already checked
# to be valid) and searches for an installation with such a version. If no
# installation with such version number has been found, the script aborts after
# showing installed versions
pgenv_installed_version_or_exit(){
    local version=$1
    if [ ! -e "pgsql-${version}" ]; then
        echo "PostgreSQL $version not installed; installed versions:"
        pgenv_versions
        exit 1
    fi
}

# Checks if there is a currently activer version and, if not, reports that fact
# and aborts the script.
pgenv_current_postgresql_or_exit(){
    if [ ! -e "pgsql" ]; then
        echo "No version of PostgreSQL currently in use"
        echo "Run \`pgenv use \$version\` to link and start a specific version"
        echo "Run \`pgenv versions\` to list all installed versions"
        exit 1
    fi
}

# Prints the currently active version number. To capture the value instead of
# printing it, make a call like `v=&( pgenv_current_version_number )`
pgenv_current_version_number(){
    # find sed even without the configuration/dependencies
    if [ -z "$PGENV_SED" ]; then
        PGENV_SED=$(which sed)
    fi
    local v=$( readlink pgsql | $PGENV_SED 's/^pgsql-//' )
    echo $v
}

# Provides the configuration file name
# for the specified version.
#
# If no version is specified, the default configuration
# file is provided.
pgenv_configuration_file_name(){
    local v=$1
    local PGENV_DEFAULT_CONFIG_FILE="${PGENV_ROOT}/.pgenv.conf"

    if [ ! -z "$v" ]; then
        echo "${PGENV_ROOT}/.pgenv.$v.conf"
    else
        echo "${PGENV_DEFAULT_CONFIG_FILE}"
    fi
}

# Dumps the specified configuration file (if exists) or aborts.
#
# The function accept two option arguments:
# - the version number (if not specified the default configuration will be considered)
# - a title to use for printing the configruation file
#
# If the file cannot be found the function exits.
pgenv_configuration_dump_or_exit(){
    local v=$1
    local title=$2

    local CONF=$( pgenv_configuration_file_name $v )

    if [ -r $CONF ]; then

        echo "# $title"
        echo "# pgenv configuration for PostgreSQL $v"
        echo "# File: $CONF"
        echo "# ---------------------------------------------------"
        cat $CONF
        echo
    else
        echo "No configuration found for version <$title> [$CONF]" >&2
        exit 1
    fi
}

# Function to load the configuration from a file.
# A configuration file is a shell file that contains variables that
# will be 'sourced' into the current script runtime.
#
# The function accepts an optional argument which is the version number
# to search for. A configuration file with such version number
# will be used as configuration, and in the case it is missing, the default
# configuration file will be used.
#
# The function sets the PGENV_CONFIGURATION_FILE variable to the name of the
# file loaded or to an empty string. This helps understanding later on
# if the configuration has been loaded.
pgenv_configuration_load(){
    local v=$1

    local PGENV_DEFAULT_CONFIG_FILE=$( pgenv_configuration_file_name )
    local PGENV_CONFIG_FILE=$( pgenv_configuration_file_name $v )
    PGENV_CONFIGURATION_FILE=''

    for conf in $( echo "$PGENV_CONFIG_FILE" "$PGENV_DEFAULT_CONFIG_FILE" )
    do
        pgenv_debug "Looking for configuration in $conf"

        if [ -r "$conf" ]; then
            pgenv_debug "Load configuration from [$conf]"
            source "$conf"
            PGENV_CONFIGURATION_FILE="$conf"
            return
        fi
    done

    pgenv_debug "No configuration loaded"
}

# Utility function to remove the configuration file.
# It does remove the default file only if there are no more installed instances
# on this system.
#
# Arguments:
# - the version to delete configuration for (nothing for deleting the default)
# - a non-empty string to force the function to terminate the script
pgenv_configuration_delete(){
    local v=$1
    local do_exit=$2
    local PGENV_DEFAULT_CONFIG_FILE=$( pgenv_configuration_file_name )
    local PGENV_CONFIG_FILE=$( pgenv_configuration_file_name $v )


    # first of all, check if the file exists
    if [ ! -f "$PGENV_CONFIG_FILE" ]; then
        if [ ! -z "$do_exit" ]; then
            echo "No configuration to delete"
            exit 1
        fi

        # nothing to do
        return
    fi

    # if the file is the default one, delete only if there are
    # no installed instances
    if [ "$PGENV_CONFIG_FILE" = "$PGENV_DEFAULT_CONFIG_FILE" ]; then
        local installed_versions=0
        for installed in $( ls -d pgsql-* 2>/dev/null )
        do
            installed_versions=$(( installed_versions + 1 ))
        done

        if [ $installed_versions -gt 0 ]; then
            if [ ! -z "$do_exit" ]; then
                echo "Cannot delete default configuration while version configurations exist"
                echo "To remove it anyway, delete $PGENV_CONFIG_FILE"
                exit 1
            fi

            # nothing to do
            return
        fi
    fi

    # remove the file
    pgenv_debug "Deleting configuration file [$PGENV_CONFIG_FILE]"
    rm -f "$PGENV_CONFIG_FILE"           # remove config file
    rm -f "${PGENV_CONFIG_FILE}.backup"  # remove also backup file
    echo "Configuration file $PGENV_CONFIG_FILE (and backup) deleted"
}


# Utility function to write a single variable in the configuration file.
#
# Accepts:
# - the configuration file name to which write to
# - the name of the variable
# - the value of the variable
# - an optional comment.
#
#
# Invoking it as
#   pgenv_configuration_write_variable 'pgenv.conf' 'foo' 'bar' 'A foo option'
#
# will result in the file in the following:
#
#   # A foo option
#   foo=bar
#
# If the variable value is not set, the variable name is placed with a comment sign.
pgenv_configuration_write_variable(){
    local file=$1
    local name=$2
    local value=$3
    local comment=$4

    if [ ! -z "comment" ]; then
        echo "# $comment" >> "$file"
    fi

    # if no value supplied, put a comment
    if [ -z "$value" ]; then
        echo -n "# " >> "$file"
    fi
    echo "${name}='${value}'" >> "$file"
    echo >> "$file"
}

# Writes the whole current configuration to the current version file
# or the version file specified. It does a backup copy in the case
# the file already exists.
pgenv_configuration_write() {
    local v=$1
    CONF=$( pgenv_configuration_file_name $v )

    # sanity check
    if [ -z "$CONF" ]; then
        echo "Cannot determine which configuration file to use!"
        exit 1
    fi

    # make a backup copy
    if [ -f "$CONF" ]; then
        CONF_BACKUP="${CONF}.backup"
        pgenv_debug "Making backup copy of [$CONF] into [$CONF_BACKUP]"
        mv "$CONF" "$CONF_BACKUP"
    fi

    # ok, write the configuration
    echo "# pgenv configuration created on $(date)" > "$CONF"
    echo "" >> "$CONF"
    pgenv_configuration_write_variable "$CONF" "PGENV_DEBUG" "" 'Enables debug output'

    echo "###### Build settings #####" >> "$CONF"
    pgenv_configuration_write_variable "$CONF" "PGENV_MAKE" "$PGENV_MAKE" 'Make command to use for build'
    pgenv_configuration_write_variable "$CONF" "PGENV_MAKE_OPTS" "$PGENV_MAKE_OPTS" 'Make flags'
    pgenv_configuration_write_variable "$CONF" "PGENV_CONFIGURE_OPTS" "$PGENV_CONFIGURE_OPTS" 'Configure flags, including PL languages but without --prefix'

    pgenv_configuration_write_variable "$CONF" "PGENV_CURL" "$PGENV_CURL" 'Curl command to download source code'
    pgenv_configuration_write_variable "$CONF" "PGENV_PATCH" "$PGENV_PATCH" 'Patch command for specific versions'
    pgenv_configuration_write_variable "$CONF" "PGENV_SED" "$PGENV_SED" 'Sed used to manipulate strings'

    echo "##### Runtime options #####" >> "$CONF"
    pgenv_configuration_write_variable "$CONF" "PGENV_LOG" "$PGENV_LOG" 'Path to the cluster log file (mandatory)'
    pgenv_configuration_write_variable "$CONF" "PGENV_INITDB_OPTS" "$PGENV_INITDB_OPTS" 'Initdb flags'
    pgenv_configuration_write_variable "$CONF" "PGENV_STOP_OPTS" "$PGENV_STOP_OPTS" 'Stop configuration flags'
    pgenv_configuration_write_variable "$CONF" "PGENV_START_OPTS" "$PGENV_START_OPTS" 'Start configuration flags'
    pgenv_configuration_write_variable "$CONF" "PGENV_RESTART_OPTS" "$PGENV_RESTART_OPTS" 'Restart configuration flags'


    echo "pgenv configuration written to file $CONF"
}


# Wrapper function to start the current instance.
# If the instance is already running, nothing happens.
# If the instance does not have already a PG_DATA
# directory, it will be initdb-ed.
pgenv_start_instance(){
    trap "" ERR

    # if the instance is already running, do nothing
    if $PG_CTL status -D "$PG_DATA" &> /dev/null; then
        echo "PostgreSQL $v is already running"
        return
    fi

    # Init the database if needed.
    pgenv_initdb

    pgenv_debug "pg_ctl starting instance with flags [$PGENV_START_OPTS] log [$PGENV_LOG]"
    $PG_CTL start -D "$PG_DATA"  -l "$PGENV_LOG" $PGENV_START_OPTS
    if [ $? -eq 0 ]; then
        echo "PostgreSQL $v started"
        echo "Logging to $PGENV_LOG"
    else
        echo "PostgreSQL $v NOT started, examine logs in $PGENV_LOG"
    fi
    trap 'exit' ERR
}

# Initializes and instance if no data directory is found.
# Requires PG_DATA to be set.
# It is safe to call multiple times.
pgenv_initdb(){
    if [ ! -d $PG_DATA ]; then
        pgenv_debug "initdb running with flags [$PGENV_INITDB_OPTS]"
        $INITDB -D "$PG_DATA" $PGENV_INITDB_OPTS
    else
        pgenv_debug "Directory $PG_DATA exists, not initdb-ing!"
    fi
}

# Wrapper function to stop or restart the current instance.
# Accepts an optional argument 'command' that specifies
# if 'stop' or 'restart' action need to be performed.
pgenv_stop_or_restart_instance(){
    local command=$1
    if $PG_CTL status -D "$PG_DATA"  &> /dev/null; then
        # ok, server running, apply the command
        case $command in
            stop)
                pgenv_debug "pg_ctl stopping with  flags [$PGENV_STOP_OPTS]"
                $PG_CTL stop -D "$PG_DATA" $PGENV_STOP_OPTS
                echo "PostgreSQL $v stopped"
                ;;
            restart)
                pgenv_debug "pg_ctl restarting with flags [$PGENV_RESTART_OPTS]"
                $PG_CTL restart -D "$PG_DATA" -l "$PGENV_LOG"  $PGENV_RESTART_OPTS
                echo "PostgreSQL $v restarted"
                echo "Logging to $PGENV_LOG"
                ;;
        esac
    else
        # server not running
        case $command in
            stop)
                echo "PostgreSQL $v not running"
                ;;
            restart)
                pgenv_start_instance
                ;;
        esac
    fi
}

case $1 in
    use)
        v=$2
        pgenv_input_version_or_exit "$v" 'show-installed-versions' 'build'
        pgenv_installed_version_or_exit $v
        pgenv_configuration_load $v

        # Check if current version?
        if [ "`readlink pgsql`" = "pgsql-$v" ]; then
            echo "Already using PostgreSQL $v"
        else
            # Shut down existing running instance.
            if [ -e "pgsql" ]; then
                if $PG_CTL status -D "$PG_DATA" &> /dev/null; then
                    $PG_CTL stop -D "$PG_DATA"
                fi
            fi

            # Link the new instance.
            ln -nsf pgsql-$2 pgsql
        fi

        # Init if needed.
        pgenv_initdb

        # start the instance
        pgenv_start_instance
        exit
        ;;

    start)
        # check a version is currently in use
        pgenv_current_postgresql_or_exit
        v=$( pgenv_current_version_number )
        pgenv_debug "Current version $v"
        pgenv_configuration_load $v

        # Start er up!
        pgenv_start_instance
        exit
        ;;

    stop|restart)
        # check a version is currently in use
        pgenv_current_postgresql_or_exit
        v=$( pgenv_current_version_number )
        pgenv_debug "Current version $v"
        pgenv_configuration_load $v

        # either stop or restart
        command="$1"

        # stop the current instance (or restart it)
        pgenv_stop_or_restart_instance $command
        exit
        ;;

    build)
        shift # remove `build` from command line

        for v in $*
        do
            # sanity checks before building
            pgenv_input_version_or_exit "$v"
            pgenv_configuration_load $v
            pgenv_check_dependencies


            # Skip it if we already have it.
            if [ -e "pgsql-$v" ]; then
                echo "PostgreSQL $v already built"
                exit
            fi

            # Switch to the src directory.
            if [ ! -e "src" ]; then
                mkdir src
            fi
            cd src

            # Download the source if wee don't already have it.
            # WARNING: older PostgreSQL used .tar.gz instead of .tar.bz2,
            # so if the version is behind 8 use the first format, otherwise
            # try to get the most compressed archive
            if [[ $v =~ ^[1-7]\. ]]; then
                PG_TARBALL="postgresql-$v.tar.gz"
                TAR_OPTS="zxf"
            else
                PG_TARBALL="postgresql-$v.tar.bz2"
                TAR_OPTS="jxf"
            fi

            if [ ! -f $PG_TARBALL ]; then
                $PGENV_CURL -fLO ${PGENV_DOWNLOAD_ROOT}/v$v/${PG_TARBALL}
            fi


            # warn if no configuration was loaded
            if [ -z "$PGENV_CONFIGURATION_FILE" ]; then
                echo "WARNING: no configuration file found for version $v"
                echo "HINT: if you wish to customize the build process please"
                echo "stop the execution within 5 seconds (CTRL-c) and run "
                echo "    pgenv config write $v && pgenv config edit $v"
                echo "adjust 'configure' and 'make' options and flags and run again"
                echo "    pgenv build $v"
                echo
                sleep 5
            fi

            # Unpack the source.
            rm -rf "postgresql-$v"
            $PGENV_TAR $TAR_OPTS $PG_TARBALL
            cd postgresql-$v

            # Patch 8.1.
            # XXXX Consider moving to a file, adding patches for older versions.
            if [[ $v =~ ^8\.[01]\. ]]; then
                $PGENV_PATCH -p1 <<EOF
--- a/src/pl/plperl/plperl.c
+++ b/src/pl/plperl/plperl.c
@@ -694,7 +694,7 @@
 		if (!isGV_with_GP(sv) || !GvCV(sv))
 			continue;
 		SvREFCNT_dec(GvCV(sv)); /* free the CV */
-		GvCV(sv) = NULL;		/* prevent call via GV */
+		GvCV_set(sv, NULL);		/* prevent call via GV */
 	}
 
 	hv_clear(stash);
EOF
            fi


            pgenv_debug "configure command line [--prefix=$PGENV_ROOT/pgsql-$v] + [$PGENV_CONFIGURE_OPTS]"
            # need to keep a single string to pass to configure or
            # will get an 'invalid package'
            ./configure --prefix=$PGENV_ROOT/pgsql-$v $PGENV_CONFIGURE_OPTS

            # make and make install
            if [[ $v =~ ^[1-8]\. ]]; then
                # 8.x (and prior versions?) doesn't have `make world`.
                $PGENV_MAKE $PGENV_MAKE_OPTS
                $PGENV_MAKE install
                cd contrib
                $PGENV_MAKE $PGENV_MAKE_OPTS
                $PGENV_MAKE install
            else
                # Yay, make world!
                $PGENV_MAKE world $PGENV_MAKE_OPTS
                $PGENV_MAKE install-world
            fi


            # write the configuration
            pgenv_configuration_write "$v"

            echo "PostgreSQL $v built"
        done
        exit
        ;;

    clear)
        v=$( pgenv_current_postgresql_or_exit )
        pgenv_configuration_load $v

        # stop the instance
        pgenv_stop_or_restart_instance 'stop'

        # We know a version is in use, since pgenv_current_postgresql_or_exit
        # otherwise would have killed the script.
        rm -f pgsql
        echo "PostgreSQL $v cleared"
        exit
        ;;

    remove)
        shift # delte `remove` from command line

        for v in $*
        do

            pgenv_input_version_or_exit "$v" 'show-installed-versions' 'build'

            if [ "`readlink pgsql`" = "pgsql-$v" ]; then
                echo "PostgreSQL $v currently in use"
                echo "Run \`pgenv clear\` to clear it"
                echo "or \`pgenv use\` to switch to another version"
                exit 1
            fi

            rm -fr "pgsql-$v"
            rm -fr src/postgresql-$v.tar.* # could be .tar.bz2 or .tar.gz
            rm -fr src/postgresql-$v
            pgenv_configuration_delete $v  # remove this particular configuration
            echo "PostgreSQL $v removed"
        done

        pgenv_configuration_delete '' 'exit'    # remove default configuration if no instances are left
        exit
        ;;

    version|current)
        pgenv_current_postgresql_or_exit
        pgenv_current_version_number
        exit
        ;;

    versions)
        pgenv_configuration_load
        pgenv_check_dependencies
        pgenv_versions
        exit
        ;;

    help)
        pgenv_help
        exit
        ;;

    available)
        # load executables
        pgenv_check_dependencies

        shift # remove the command from the argument list
        echo -e "             Available PostgreSQL Versions"
        echo -e "========================================================\n"

        # there should be a simpler single regexp...
        # First of all download the page with the links to each version (href=va.b.c/)
        # and trim out each version, then extract the major version
        # and append each version to an hash indexed by the major version number
        for version in $( curl -s $PGENV_DOWNLOAD_ROOT \
                              | grep -o '<a href=['"'"'"][^"'"'"']*['"'"'"]' \
                              | sed -e 's/^<a href=["'"'"']//' -e 's/["'"'"']$//' \
                              | sed 's/^v//' \
                              | sed 's/\/$//')
        do
            major=$( echo $version | $PGENV_SED 's/\([[:digit:]]\{1,2\}\).*/\1/' )
            pgenv_debug "Extracted major version [$major]"

            # check the version is a number!
            if [[ $major =~ ^[0-9]+$ ]] ; then
                # Since PostgreSQL 10, a major version is
                # made by only the first number
                # (apply the same logic for old versions)
                # here the major version is considered as multipled
                # by a ten factor, so that version 10 becomes value 100
                # while version 9.6 becomes 96
                if [ $major -ge 10 -o $major -le 6 ]; then
                    minor=0
                else
                    minor=$( echo $version | $PGENV_SED 's/[[:digit:]]\.\([[:digit:]]\{1,2\}\).*/\1/' )
                fi
                major=$(( major * 10 + minor ))
                pgenv_debug "Normalized major version [$major]"
                # append the current version to the hash
                # indexed by the major version
                versions_hash[ "$major" ]+="${version}-"
            fi
        done

        # check to have some version in the hash, or
        # the download did go wrong
        keys=$( echo ${!versions_hash[@]} )
        if [ -z "$keys" ]; then
            echo "No versions found at URL <$PGENV_DOWNLOAD_ROOT>"
            pgenv_debug "Hash content: ${!versions_hash[@]}"
            exit 1
        fi

        # read back the versions and display the output
        # displying each version with a separated header
        for major in $( echo ${!versions_hash[@]} | sort -n )
        do
            # normalize version numbers
            # (note, use sed instead of bc to avoid introducing another dependency)
            if [ $major -ge 70 -a $major -le 96 ]; then
                current_version=$( echo $major | $PGENV_SED 's/\([[:digit:]]\)\([[:digit:]]\)/\1\.\2/' )
            else
                current_version=$(( major / 10 ))
            fi

            # drop away specific versions if the user required only
            # a few. All arguments, if any, are major version numbers,
            # so check on each of them to see if it makes match with the
            # current version, and if not, avoid printing this version.
            must_print=1 # always print a version group in default
            if [ $# -ge 1 ]; then
                must_print=0
                for required_major in $*
                do
                    if [ $current_version = $required_major ]; then
                        must_print=1
                        break
                    fi
                done

                if [ $must_print -ne 1 ]; then
                    pgenv_debug "Skip major version $current_version (required $*)"
                    continue
                fi
            fi

            echo "                     PostgreSQL $current_version"
            echo "    ------------------------------------------------"
            printed=0
            for numeric in $( echo ${versions_hash[$major]} \
                                  | tr '-' '\n'  \
                                  | sort -V  )
            do
                # new line after 5 numbers
                if [ $printed -gt 5 ]; then
                    printed=0
                    echo
                fi

                # move to right to begin the line
                if [ $printed -eq 0 ]; then
                    echo -n "    "
                fi

                # the output string will be 'MM.m.pp' or 'MM.mm'
                # therefore no more than 6 chars, left aligned
                printf " %-6s " $numeric
                printed=$(( printed +  1 ))
            done
            echo -e "\n"
        done
        exit
        ;;

    check)
        # load default configuration
        pgenv_configuration_load
        # check for all required dependencies
        pgenv_check_dependencies "verbose"
        exit
        ;;

    config|configuration)
        action=$2
        v=$3

        # which version does the user wants?
        case "$v" in
            version|current)
                v=$( pgenv_current_version_number )
                title='PostgreSQL currently in use'
                ;;
            default)
                v=''
                title='Default configuration'
                ;;
            *)
                # get the currently in use if none specified
                if [ -z "$v" ]; then
                    v=$( pgenv_current_version_number )
                fi

                title="PostgreSQL $v"
                ;;
        esac


        case $action in
            show)
                pgenv_configuration_dump_or_exit "$v" "$title" ;;
            write)
                # in an explicit write load first the variables from the runtime
                # environment, so PL/Perl, make, and stuff can be already set
                pgenv_check_dependencies
                pgenv_configuration_write "$v" ;;
            edit)
                configuration_file=$( pgenv_configuration_file_name $v )
                if [ ! -z "$EDITOR" ]; then
                    $EDITOR $configuration_file
                else
                    echo "No EDITOR variable set, manually start your editor to edit $configuration_file"
                    exit 1
                fi
                ;;
            delete)
                pgenv_configuration_delete "$v" 'exit';;
            *)
                if [ -z "$action" ]; then
                    echo "You need to specify a \`config\` action to perform"
                else
                    echo "Configuration action \`$action\` not supported"
                fi
                exit 1
                ;;
        esac
        exit
        ;;

    *)
        if [ $# -gt 0 ]; then
            echo "Unknown command \`$1\`"
        fi

        pgenv_help
        exit 1
        ;;
esac
